[
  {
    "filePath": "api/src/main.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 7,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 7,
        "endColumn": 12,
        "suggestions": [
          {
            "fix": {
              "range": [
                111,
                145
              ],
              "text": ""
            },
            "messageId": "removeConsole",
            "data": {
              "propertyName": "log"
            },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_req' is defined but never used.",
        "line": 11,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_res' is defined but never used.",
        "line": 11,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_next' is defined but never used.",
        "line": 11,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 11,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 11,
        "endColumn": 34
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'unused' is assigned a value but never used.",
        "line": 19,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": {
              "varName": "unused"
            },
            "fix": {
              "range": [
                359,
                377
              ],
              "text": ""
            },
            "desc": "Remove unused variable 'unused'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'unused' is assigned a value but never used.",
        "line": 19,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 13
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 23,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 23,
        "endColumn": 15,
        "fix": {
          "range": [
            435,
            438
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'x' is assigned a value but never used.",
        "line": 23,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": {
              "varName": "x"
            },
            "fix": {
              "range": [
                435,
                445
              ],
              "text": ""
            },
            "desc": "Remove unused variable 'x'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'x' is assigned a value but never used.",
        "line": 23,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                570,
                573
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                570,
                573
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 49,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 49,
        "endColumn": 15
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 49,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 49,
        "endColumn": 33
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 50,
        "column": 14,
        "nodeType": "MemberExpression",
        "endLine": 50,
        "endColumn": 24
      },
      {
        "ruleId": "consistent-return",
        "severity": 1,
        "message": "Expected to return a value at the end of arrow function.",
        "line": 53,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingReturn",
        "endLine": 53,
        "endColumn": 39
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 64,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 64,
        "endColumn": 12,
        "suggestions": [
          {
            "fix": {
              "range": [
                1429,
                1454
              ],
              "text": ""
            },
            "messageId": "removeConsole",
            "data": {
              "propertyName": "log"
            },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 66,
        "column": 24,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 66,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 15,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import express from \"express\"; // ok\nimport cors from \"cors\"; // ok\n\nconst app = express();\n\n// ❌ [no-console]\nconsole.log(\"Starting server...\");\n\napp.use(cors());\n// ❌ [no-empty-function]\napp.use((_req, _res, _next) => {});\n\napp.use(express.json());\n\ntype Todo = { id: string; title: string; done: boolean };\nconst todos: Todo[] = [];\n\n// ❌ [no-unused-vars]\nconst unused = 42;\n\napp.get(\"/todos\", (req, res) => {\n    // ❌ [no-var]\n    var x = 1;\n\n    res.json(todos);\n});\n\napp.post(\"/todos\", (req, res) => {\n    // ❌ [@typescript-eslint/no-explicit-any]\n    const body: any = req.body;\n\n    const todo: Todo = {\n        id: Date.now().toString(),\n        title: body.title,\n        done: false,\n    };\n\n    todos.push(todo);\n    res.status(201).json(todo);\n});\n\napp.put(\"/todos/:id\", async (req, res) => {\n    // ❌ [promise/always-return] — pas de `return` dans async\n    const idx = todos.findIndex(t => t.id === req.params.id);\n\n    // ❌ [security/detect-object-injection]\n    if (idx === -1) res.status(404).json({ error: \"Not found\" });\n\n    todos[idx] = { ...todos[idx], ...req.body };\n    res.json(todos[idx]);\n});\n\napp.delete(\"/todos/:id\", (req, res) => {\n    const idx = todos.findIndex(t => t.id === req.params.id);\n    if (idx === -1) return res.status(404).json({ error: \"Not found\" });\n\n    const [removed] = todos.splice(idx, 1);\n    res.json(removed);\n});\n\nconst PORT = process.env.PORT ?? 8080;\n\n// ❌ [no-console]\nconsole.log(\"App ready\");\n\napp.listen(PORT, () => console.log(`API running on http://localhost:${PORT}`)); // ❌ [no-console]\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-empty-interface",
        "replacedBy": [
          "@typescript-eslint/no-empty-object-type"
        ],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-empty-object-type",
                "url": "https://typescript-eslint.io/rules/no-empty-object-type"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
        }
      },
      {
        "ruleId": "callback-return",
        "replacedBy": [
          "n/callback-return"
        ],
        "info": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "callback-return",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
              }
            }
          ]
        }
      }
    ]
  }
]